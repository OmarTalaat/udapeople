version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@1.3.1
  node: circleci/node@4.1.0


commands:
  notify_on_fail:
    steps:
      - slack/notify:
          channel: circleci-pipeline
          event: fail
          template: basic_fail_1

  install_ansible:
    steps:
      - run:
          name: Install ansible
          command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y





  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - checkout
      - run:
          name: Destroy environments back end
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.WORKFLOW_ID>>
              aws cloudformation wait stack-delete-complete --stack-name udapeople-backend-<<parameters.WORKFLOW_ID>>
  
      - run:
          name: Destroy environments front-end
          when: on_fail
          command: |
              aws s3 rm s3://udapeople-<<parameters.WORKFLOW_ID>> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.WORKFLOW_ID>>
              aws cloudformation wait stack-delete-complete --stack-name udapeople-frontend-<<parameters.WORKFLOW_ID>>



  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WORKFLOW_ID:
          type: string 
          default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/JeKSH41hhLLsFDYSSchKwz/migration_<<parameters.WORKFLOW_ID>> )
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:

  notify_on_successful:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          channel: circleci-pipeline
          event: pass
          template: success_tagged_deploy_1
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-dep]
      - run:
          name: Front-End Install
          command: |
            npm run frontend:install
      - run:
          name: Front-End Build
          command: |
            npm run frontend:build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-dep
      - notify_on_fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-dep]
      - run:
          name: Back-End Install
          command: |
            npm run backend:install
      - run:
          name: Back-End Build
          command: |
            npm run backend:build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-dep
      - notify_on_fail
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-dep]
      - run:
          name: Front-End test
          command: |
            npm run frontend:install
            npm run frontend:test
      - notify_on_fail
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-dep]
      - run:
          name: Back-End test
          command: |
            npm run backend:install
            npm run backend:test
      - notify_on_fail
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-dep]
      - run:
          name: Front-End scan
          command: |
            npm run frontend:install
            npm run frontend:audit
      - notify_on_fail

  scan-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-build-dep]
        - run:
            name: Back-End scan
            command: |
              npm run backend:install
              npm run backend:audit
        - notify_on_fail







workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_successful:
          requires: 
           - build-frontend 
           - build-backend 
           - test-frontend 
           - test-backend 
           - scan-backend 
           - scan-frontend
