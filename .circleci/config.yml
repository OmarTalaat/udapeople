version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@1.3.1
  node: circleci/node@4.1.0


commands:
  notify_on_fail:
    steps:
      - slack/notify:
          channel: circleci-pipeline
          event: fail
          template: basic_fail_1

  install_ansible:
    steps:
      - run:
          name: Install ansible
          command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y





  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - checkout
      - run:
          name: Destroy environments back end
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.WORKFLOW_ID>>
              aws cloudformation wait stack-delete-complete --stack-name udapeople-backend-<<parameters.WORKFLOW_ID>>
  
      - run:
          name: Destroy environments front-end
          when: on_fail
          command: |
              aws s3 rm s3://udapeople-<<parameters.WORKFLOW_ID>> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.WORKFLOW_ID>>
              aws cloudformation wait stack-delete-complete --stack-name udapeople-frontend-<<parameters.WORKFLOW_ID>>



  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WORKFLOW_ID:
          type: string 
          default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/JeKSH41hhLLsFDYSSchKwz/migration_<<parameters.WORKFLOW_ID>> )
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:

  notify_on_successful:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          channel: circleci-pipeline
          event: pass
          template: success_tagged_deploy_1
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-dep]
      - run:
          name: Front-End Install
          command: |
            npm run frontend:install
      - run:
          name: Front-End Build
          command: |
            npm run frontend:build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-dep
      - notify_on_fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-dep]
      - run:
          name: Back-End Install
          command: |
            npm run backend:install
      - run:
          name: Back-End Build
          command: |
            npm run backend:build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-dep
      - notify_on_fail
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-dep]
      - run:
          name: Front-End test
          command: |
            npm run frontend:install
            npm run frontend:test
      - notify_on_fail
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-dep]
      - run:
          name: Back-End test
          command: |
            npm run backend:install
            npm run backend:test
      - notify_on_fail
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-dep]
      - run:
          name: Front-End scan
          command: |
            npm run frontend:install
            npm run frontend:audit
      - notify_on_fail

  scan-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-build-dep]
        - run:
            name: Back-End scan
            command: |
              npm run backend:install
              npm run backend:audit
        - notify_on_fail

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
        - checkout
        - aws-cli/setup
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"


        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

        - run:
            name: Add back-end ip to ansible inventory
            command: |
                Backend_publicId=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name ,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text )
                echo $Backend_publicId >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt


        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - notify_on_fail
        - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - node/install:
          node-version: '13.8.0'
      - install_ansible
      - add_ssh_keys:
          fingerprints:
            - "6b:c5:8b:e8:aa:f6:f1:b1:ca:6e:24:ce:0c:37:82:3a"
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
        - image: cimg/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to KVDb.io
          command: |
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                  curl -d  '1'  https://kvdb.io/JeKSH41hhLLsFDYSSchKwz/migration_${CIRCLE_WORKFLOW_ID:0:7} 
                fi
      - destroy-environment
      - revert-migrations


  deploy-frontend:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - node/install:
          node-version: '13.8.0'
      - restore_cache:
           keys: [frontend-build-dep]
      - run:
          name: Install dependencies
          command: |
             npm run frontend:install
      - run:
          name: Get backend url
          command: |
            Backend_publicId=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name ,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text )
            echo "API_URL=http://${Backend_publicId}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            npm run frontend:build
            aws s3 cp ./frontend/dist  s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
  deploy-backend:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - install_ansible
      - node/install:
          node-version: '13.8.0'
      - add_ssh_keys:
          fingerprints:
            - "6b:c5:8b:e8:aa:f6:f1:b1:ca:6e:24:ce:0c:37:82:3a"
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build-dep]
      - run:
          name: Install dependencies
          command: |
              npm run backend:install
      - run:
          name: Package Backend
          command: |
              npm run backend:build
              cd backend
              tar -czf artifact.tar.gz dist/* package*

              cd .. 
              cp backend/artifact.tar.gz  .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt  deploy-backend.yml

      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - node/install:
          node-version: '13.8.0'
      - run:
          name: Backend smoke test.
          command: |
            Backend_publicId=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name ,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text )
            export "API_URL=http://${Backend_publicId}:3030"
            if curl -s $API_URL/api/status | grep "ok"
            then 
              exit 0
            else 
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then 
              exit 0
            else 
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - node/install:
          node-version: '13.8.0'
      - run:
          name: save old work flow id
          command: |
            export oldworkflowId=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WORKFLOW_ID\`].Value" \
              --no-paginate --output text )
            echo "old work flow id: $oldworkflowId"
            curl https://kvdb.io/JeKSH41hhLLsFDYSSchKwz/workflowId -d "${oldworkflowId}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_successful:
          requires: 
           - build-frontend 
           - build-backend 
           - test-frontend 
           - test-backend 
           - scan-backend 
           - scan-frontend
      - deploy-infrastructure:
          requires:
           - test-frontend
           - test-backend
           - scan-frontend
           - scan-backend
           - notify_on_successful
          filters:
            branches:
              only:
               - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      #- notify_on_successful:
       #   requires: [deploy-infrastructure , configure-infrastructure , run-migrations , deploy-frontend , deploy-backend , smoke-test ,cloudfront-update , cleanup]